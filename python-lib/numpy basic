
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7e1ec909",
   "metadata": {},
   "source": [
    "# 넘파이 기본\n",
    "\n",
    "- numpy 특징:\n",
    "    - C로 구현된 고성능의 수치계산을 위해 제작된 파이썬 라이브러리 (numerical python의 줄임말)\n",
    "    - 벡터, 행렬 연산에 있어 많은 기능 제공\n",
    "    - pandas & matplotlib 기반으로 사용 -> 데이터분석 & 머신러닝 기초\n",
    "- numpy 장점:\n",
    "    - 데이터의 전처리 빨라짐\n",
    "    - ML 모델 구현할 때도 더 좋은 성능을 내는 모델 구현할 수 있을것\n",
    "    \n",
    "- numpy 데이터 traitement:\n",
    "    - 기본적으로 array 단위로 데이터 관리 & 연산수행 -> 데이터 타입에 비해 빠르고, 메모리의 효율적\n",
    "    - 한 array : 한 타입 저장 가능\n",
    "\n",
    "- numpy 형태:\n",
    "    - 1차원 numpy array: Vector\n",
    "    - 2차원 numpy array: matrix\n",
    "    - 3차원 이상 numpy array: tensor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1226222c",
   "metadata": {},
   "source": [
    "출처: https://ebbnflow.tistory.com/158 [삶은 확률의 구름]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f9f517d",
   "metadata": {},
   "source": [
    "### numpy array 정의"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8d748807",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3,)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# list -> np array\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "lst = [1,2,3]\n",
    "#lst\n",
    "\n",
    "arr = np.array(lst)\n",
    "#arr\n",
    "arr.shape # array shape 확인 | list는 shape 없음 ; dim = 1 ; element = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d449e472",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.dtype # data type 확인, int64 = integer 64 bits\n",
    "\n",
    "'''\n",
    "numpy의 자료형 종류\n",
    " \n",
    "부호가 있는 정수 int(8, 16, 32, 64)\n",
    "부호가 없는 정수 uint(8, 16, 32, 64)\n",
    "실수 float(8, 16, 32, 64)\n",
    "복소수 complex(8, 16, 32, 64)\n",
    "불리언 bool\n",
    "문자열 string_\n",
    "파이썬 오브젝트 object\n",
    "유니코드 unicode_\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dccd867",
   "metadata": {},
   "source": [
    "### np array 정의"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2b9e9858",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# array 바로 생성\n",
    "\n",
    "arr2 = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) # 4x3 행렬 ; dim = 2 - []갯수\n",
    "arr2.shape\n",
    "arr2.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f17c53bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "np.zeros() : 자연어 전처리에서 단어사전에 없는 데이터를 모두 0으로 초기화할 때 사용\n",
    "np.ones()\n",
    "np.arange()\n",
    "'''\n",
    "\n",
    "# dim = 1, elements = 0*10 \n",
    "np.zeros(10)\n",
    "#np.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a67abfd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dim = 2, element = 0*4\n",
    "np.zeros((3,4)) # 행x열"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "df248e04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.ones(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "87229d37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.arange(3,10) # 3부터 1씩 증가하고 9가 마지막이 되는 배열 생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "39e1ebf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10, 10, 10],\n",
       "       [10, 10, 10]], dtype=int32)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.full((2,3),10, dtype=np.int32) # 2x3행렬, 원소 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "504d759c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0, 27,  0],\n",
       "       [ 0,  0,  0]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.empty((2,3), dtype=int) # 특정값 지정하지 않고 배열생성 (par défaut); 요소로 난수와 다른 임의의 값 들어감"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5ebb10b7",
   "metadata": {},
   "source": [
    "np.zeros_like()\n",
    "np.empty_like() # like 가 붙은 함수는 기존 배열의 차원만 가져와서 ones나 zeros 행렬 만듦"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5a669dbe",
   "metadata": {},
   "source": [
    "대각의 값이 1인 단위행렬 생성\n",
    "np.identity(N, dtype=자료형) # N*N 크기의 단위행렬 반환\n",
    "\n",
    "np.eye(N, M, k=K, dtype=자료형)\n",
    "# N*M 크기의 K값 만큼 이격된 단위 행렬을 반환 (K가 양수 -> 우상방향, 음수 -> 좌하 방향)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05494ff5",
   "metadata": {},
   "source": [
    "### np 연산 'Element-wise' method = vectorized operation 벡터화연산"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2a537ec3",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = np.array([[1,2,3],[4,5,6]])\n",
    "arr2 = np.array([[7,8,9], [10,11,12]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "75b0e3d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 8, 10, 12],\n",
       "       [14, 16, 18]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr + arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "9742374b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-6, -6, -6],\n",
       "       [-6, -6, -6]])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr - arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e0f1d57a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 7, 16, 27],\n",
       "       [40, 55, 72]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 곱셈 : 행렬곱이 아닌 각 요소별로 곱셈\n",
    "arr * arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "012db2da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.14285714, 0.25      , 0.33333333],\n",
       "       [0.4       , 0.45454545, 0.5       ]])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 나눗셈 : 각 요소별로 나눗셈\n",
    "arr / arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "8fc164e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[11, 13, 15],\n",
       "       [14, 16, 18]])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 크기가 다른 np.array 연산 -> 브로드캐스트 이용\n",
    "arr3 = ([10,11,12])\n",
    "\n",
    "'''\n",
    "arr의 쉐입 (2,3)\n",
    "arr3 쉐입 (3,)\n",
    "-> arr3 -> ([[10,11,12],[10,11,12]]) 로 확장되어 계산됨\n",
    "'''\n",
    "arr + arr3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b0bb29e",
   "metadata": {},
   "source": [
    "### np indexing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "287b0348",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# index : 0~\n",
    "\n",
    "arr = np.arange(10)\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8bec3121",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ebfe8a8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4, 5, 6, 7])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# slicing \n",
    "arr[3:8] # index 3 ~ index 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e78699b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr[3:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6dcff29c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0f11f85d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 다차원 arr 인덱싱\n",
    "arr2 = np.array([[1,2,3],[4,5,6],[7,8,9]])\n",
    "arr2[0,0] # 행=0의 렬0 요소"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "966a6e90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7, 8, 9])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2행의 모든요소\n",
    "arr2[2,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "0878811c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8, 9])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2행의 2번째 요소(index=1)부터 나타내기\n",
    "arr2[2,1:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6dcd670",
   "metadata": {},
   "source": [
    "### np arr 논리연산"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "a95eae56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True, False,  True])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "벡터와 행렬의 덧셈, 뺄셈, 곱셈, 나눗셈, 사칙연산 가능\n",
    "논리연산도 가능 (e.g., 비교연산)\n",
    "'''\n",
    "\n",
    "a = np.array([1,2,3,4])\n",
    "b = np.array([4,2,2,4])\n",
    "\n",
    "a == b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "aed22987",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True,  True,  True])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a >= b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "ccdc4e8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 배열 모든 원소가 모두 같은지 알고싶을 때, all() 사용\n",
    "'''\n",
    "한번에 comparaison 가능 (~= python map())\n",
    "'''\n",
    "\n",
    "a = np.array([1,2,3,4])\n",
    "b = np.array([1,2,3,4])\n",
    "c = np.array([1,3,3,4])\n",
    "\n",
    "np.all(a == b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "3986a9eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.all(a == c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "1e17245f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(a>0) # 0보다 큰 element in a"
   ]
  },
  {
   "cell_type": "raw",
   "id": "c25d42a9",
   "metadata": {},
   "source": [
    "np.any, np.all ,np.logical_and, np.logical_or, np.where.\n",
    "\n",
    "위 함수들을 많이 사용\n",
    "조건문을 파라미터로 넣을 수 있는데 해당 조건을 만족하는 np.array의 인덱스 값을 반환\n",
    "또는 if( condition, a, b)와 동일하게 where( condition, a, b)라고 한다면 condition을 만족하면 a로 만족하지 않으면 b로 값을 변환\n",
    "데이터 전처리에서 많이 사용\n",
    "\n",
    "np.isnan 도 많이 사용\n",
    "NaN 값이냐 아니냐 논리 연산을 하는 것\n",
    "데이터 탐색할 때 NULL 값이 있는지 있다면 얼마나 있는지 확인할 때 사용\n",
    "\n",
    "array[ condition ]  형태를 사용하면\n",
    "condition을 만족하는 인덱스의 값들만을 추출\n",
    "이는 R의 데이터프레임에 익숙하신 분들에게는 익숙한 방법\n",
    "condition 자체가 불리언 인덱스로 나타나기 때문에 ( np.array > 0 을 할 때 True 또는 False로 구성된 동일한 차원을 가진 np.array가 반환)\n",
    "해당 불리언 인덱스만 만족하는 array를 반환합니다.\n",
    " \n",
    "array[ index array ] 또는 array.take( index array ) 를 할 때는\n",
    "array의 인덱스 값을 가지고 있는 array를 입력해서 해당 인덱스의 값으로 구성된 값을 반환해주는데\n",
    "일반적으로 y의 값을 추출할 때 주로 사용하는 방법\n",
    " \n",
    " \n",
    "출처: https://ebbnflow.tistory.com/159 [삶은 확률의 구름]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93767908",
   "metadata": {},
   "source": [
    "### 벡터 & 행렬 지수함수, 로그함수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "614b16f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.arange(5)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "a36692c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.        ,  2.71828183,  7.3890561 , 20.08553692, 54.59815003])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp(a) # 지수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "f4b6122d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([    1,    10,   100,  1000, 10000])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10 ** a # 10^0, 10^1, 10^2.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "7ae204e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.69314718, 1.09861229, 1.38629436, 1.60943791])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.log(a + 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87a4d885",
   "metadata": {},
   "source": [
    "### 스칼라와 벡터/행렬의 곱셈"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "9c2242a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting lPython\n",
      "  Downloading lpython-1.0.0a1-py3-none-any.whl (32 kB)\n",
      "Installing collected packages: lPython\n",
      "Successfully installed lPython-1.0.0a1\n"
     ]
    }
   ],
   "source": [
    "!pip install lPython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "df152b64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ipython in /Users/young/opt/anaconda3/lib/python3.8/site-packages (7.22.0)\n",
      "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (3.0.17)\n",
      "Requirement already satisfied: setuptools>=18.5 in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (52.0.0.post20210125)\n",
      "Requirement already satisfied: traitlets>=4.2 in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (5.0.5)\n",
      "Requirement already satisfied: appnope in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (0.1.2)\n",
      "Requirement already satisfied: pickleshare in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (0.7.5)\n",
      "Requirement already satisfied: backcall in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (0.2.0)\n",
      "Requirement already satisfied: jedi>=0.16 in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (0.17.2)\n",
      "Requirement already satisfied: decorator in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (5.0.6)\n",
      "Requirement already satisfied: pygments in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (2.8.1)\n",
      "Requirement already satisfied: pexpect>4.3 in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from ipython) (4.8.0)\n",
      "Requirement already satisfied: parso<0.8.0,>=0.7.0 in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from jedi>=0.16->ipython) (0.7.0)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from pexpect>4.3->ipython) (0.7.0)\n",
      "Requirement already satisfied: wcwidth in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython) (0.2.5)\n",
      "Requirement already satisfied: ipython-genutils in /Users/young/opt/anaconda3/lib/python3.8/site-packages (from traitlets>=4.2->ipython) (0.2.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install ipython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "3b259bd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import display, Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "2ef51d06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(10)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "9bcda8d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0, 100, 200, 300, 400, 500, 600, 700, 800, 900])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100 * x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "2eaf0e2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(12).reshape(3,4)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "70af1b4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0,  100,  200,  300],\n",
       "       [ 400,  500,  600,  700],\n",
       "       [ 800,  900, 1000, 1100]])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100 * x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f0b4988",
   "metadata": {},
   "source": [
    "### 브로드캐스팅 broadcasting\n",
    "\n",
    "조건:\n",
    "- 차원의 크기가 1 (벡터일때)\n",
    ": 두 배열간 연산에서 최소한 하나의 배열의 차원이 1이면 가능\n",
    "\n",
    "- 차원의 짝이 맞을때 가능\n",
    ": 차원에 대해 축의 길이가 동일하면 가능\n",
    "e.g., (3,4,2)크기인 3차원 배열 x와 (4,2)크기인 2차원 배열 y 연산 => y = (3,4,2)로 브로딩캐스트되어 연산됨.\n",
    "=> 브로드캐스팅은, 저차원의 배열을 연산을 위해 고차원의 배열로 확장시키는 것.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "56344ee2",
   "metadata": {},
   "outputs": [],
   "source": [
    "i = Image('1.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e82e2bee",
   "metadata": {},
   "source": [
    "![title](1.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "7a1f77c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(5)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "05ad4638",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = np.ones_like(x)\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "296a119f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x + y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "fcbf169c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "73817766",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [1, 2, 3],\n",
       "       [2, 3, 4],\n",
       "       [3, 4, 5],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 차원이 높은경우\n",
    "\n",
    "x = np.vstack([range(7)[i:i + 3] for i in range(5)])\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "97430c81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0],\n",
       "       [1],\n",
       "       [2],\n",
       "       [3],\n",
       "       [4]])"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = np.arange(5)[:, np.newaxis]\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "6038d975",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2],\n",
       "       [ 2,  3,  4],\n",
       "       [ 4,  5,  6],\n",
       "       [ 6,  7,  8],\n",
       "       [ 8,  9, 10]])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x + y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e18fde88",
   "metadata": {},
   "source": [
    "### 선형조합 (linear combination)\n",
    "- 백터/행렬에 스칼라 값을 곱한후 더하거나 뺀 것을 벡터/행렬의 선형조합이라고 함.\n",
    "- 선형조합을 해도 크기는 변하지 않음"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50b6f518",
   "metadata": {},
   "source": [
    "### 차원 축소 연산 (dimension reduction)\n",
    "- 행렬 하나의 행에 있는 원소들을 하나의 데이터 집합으로 보고,\n",
    "그 집합의 평균을 구하면, 각 행에 대해 하나의 수가 나옴.\n",
    "e.g., 10x5크기의 2차원 배열 -> 행-평균을 구하면, 10개의 숫자를 가진 1차원 벡터가 나옴 (10x1)\n",
    "=> 차원 축소 연산\n",
    "\n",
    "최대/최소: min, max, argmin, argmax\n",
    "\n",
    "통계: sum, mean, median, std, var\n",
    "\n",
    "불리언: all, any"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "ec3d4b97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4])"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.array([1,2,3,4])\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "7c096ddf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(x) # x.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "1326d1d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "8a05d26a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "ddc79dd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.argmin() # 최솟값의 위치"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "94cea7fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.argmax() # 최댓값의 위치"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "fcaef40d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.5"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "c9b71c51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.5"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.median(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "26401c14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.all([True, True, False])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "bc625f12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.any([True, True, False])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f6402da",
   "metadata": {},
   "source": [
    "### 연산의 대상이 2차원 이상인 경우 -> 어느 차원으로 계산할지를 axis 인수를 사용해 지시\n",
    "axis = 0 : 열 연산\n",
    "    \n",
    "axis = 1 : 행 연산\n",
    "    \n",
    "axios = 0 : 디폴트값"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "3b368187",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 1],\n",
       "       [2, 2]])"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.array([[1,1],[2,2]])\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "aed1e415",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "11e8d1d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 3])"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.sum(axis=0) # 열합계"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "9179b519",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 4])"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.sum(axis=1) # 행합계"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38936b5d",
   "metadata": {},
   "source": [
    "### 벡터의 곱:\n",
    "-내적 inner product: dot product로 표기 (넘파이)\n",
    "    -> 두 차원(길이)가 같아야하고, 앞의 벡터가 행 벡터, 뒤에 벡터가 열 벡터여야함\n",
    "\n",
    "-연산자:\n",
    "    * : 별연산자, 애스터리스크는 shape이 동일한 두 행렬을 원소끼리 element-wise 곱하는 연산자\n",
    "    dot(), matmul() : 두 벡터의 내적, 내적곱, 점곱 등 계산하는 함수\n",
    "        => matmul() 사용 권장 -> 첫번째 행렬의 열 크기와, 두번째 행렬의 행 크기가 같아야함.\n",
    "        \n",
    "-특징:\n",
    "    교환법칙 성립되지 않음 (내적)\n",
    "    a * b != b * a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "f1cc5b25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [3, 4, 5]])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(6).reshape([2,3])\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "1a810157",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = np.arange(12).reshape([3,4])\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "5db5b620",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[20, 23, 26, 29],\n",
       "       [56, 68, 80, 92]])"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.dot(y) # np.dot(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "d69c770b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-133-200459a17756>:3: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.\n",
      "  np.dot(x,y) == np.dot(y,x)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(6).reshape([2,3])\n",
    "y = np.arange(6).reshape([3,2]) - 3 # 각원소에 -3 element-wise\n",
    "np.dot(x,y) == np.dot(y,x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab8e4e4a",
   "metadata": {},
   "source": [
    "### np.matmul()\n",
    "\n",
    "np.matmul()함수는 np.dot()함수와 비슷해보이지만,\n",
    "3차원 이상의 행렬곱을 계산하는 방식이 서로 다름.\n",
    "\n",
    "np.matmul()은 @ 연산자로 사용\n",
    "\n",
    "### np.matmul()과 np.dot()의 차이점:\n",
    "1) dot은 행렬과 상수의 곱셈 허용 ; matmul은 에러남\n",
    "\n",
    "2) 3차원 이상의 행렬곱(tensor multiplication)을 수행 -> 서로 다른 결과"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "533b23e6",
   "metadata": {},
   "source": [
    "![title](2.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "b8ba0fca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  4],\n",
       "       [-8,  4]])"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dim = 2, matmul() == dot()\n",
    "\n",
    "np.dot(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "2667ff25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  4],\n",
       "       [-8,  4]])"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.matmul(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "28125b9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dim >= 2, matmul() != dot()\n",
    "x = np.arange(2*2*4).reshape((2,2,4))\n",
    "y = np.arange(2*2*4).reshape((2,4,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "754312ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[ 28,  34],\n",
       "         [ 76,  82]],\n",
       "\n",
       "        [[ 76,  98],\n",
       "         [252, 274]]],\n",
       "\n",
       "\n",
       "       [[[124, 162],\n",
       "         [428, 466]],\n",
       "\n",
       "        [[172, 226],\n",
       "         [604, 658]]]])"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.dot(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "ebd6fe32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 28,  34],\n",
       "        [ 76,  98]],\n",
       "\n",
       "       [[428, 466],\n",
       "        [604, 658]]])"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.matmul(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "5a763ea3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = np.arange(2*2*4) # np.arange(16)\n",
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b2aface",
   "metadata": {},
   "source": [
    "### numpy의 np.random.randint|rand|randn\n",
    "\n",
    "random -> 난수생성\n",
    "\n",
    "\n",
    "np.random.randint 균일분포의 정수 난수 1개 생성\n",
    "\n",
    "np.random.rand 0~1사이의 균일 분포에서 난수 matrix array 생성 / 음수값 불가\n",
    "\n",
    "np.random.randn 가우시안 표준정규분포에서 난수 matrix array 생성 / 음수값 가능\n",
    "\n",
    "\n",
    "np.random.shuffle 기존 데이터순서 바꾸기\n",
    "\n",
    "np.random.choice 기존의 데이터에서 sampling\n",
    "\n",
    "np.unique 데이터에서 중복된 값을 제거하고 중복되지 않는 값의 리스트 출력\n",
    "\n",
    "np.bincount 발생하지 않은 사건에 대해서도 카운트\n",
    "\n",
    "\n",
    "np.random.seed seed를 통한 난수 생성\n",
    "\n",
    "출저: https://nittaku.tistory.com/443\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "383b63ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randint(6) # 0~5까지 랜덤한 숫자 1개"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "9df8c5d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randint(1,20) #1~19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "0dabbf32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.25918799, 0.63249988, 0.53463402, 0.19218808, 0.73954438,\n",
       "       0.60540269])"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(6) # np.random.rand(m,n) : 0~1의 균일분포 표준정규분포 난수를 matrix array(m,n)생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "2db98246",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.02877499, 0.49201648],\n",
       "       [0.78885937, 0.80349979],\n",
       "       [0.77593881, 0.64697031]])"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(3,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "ec87c1ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.34256056,  0.20670401, -0.39956259, -0.78565343, -0.19704336,\n",
       "        0.30417975])"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randn(6) # 평균0, 표준편차1의 가우시안 표준정규분포 난수를 matrix array(m,n) 생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "4b2fad37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.70608235,  0.62876181],\n",
       "       [ 0.06272034, -0.58241905],\n",
       "       [-1.02994902, -2.40889067]])"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randn(3,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cf5396f",
   "metadata": {},
   "source": [
    "https://ebbnflow.tistory.com/160"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33ad7eb2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
